"use strict";(self.webpackChunkts_belt_docs=self.webpackChunkts_belt_docs||[]).push([[128],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=s(n),u=r,h=m["".concat(p,".").concat(u)]||m[u]||c[u]||i;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8495:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>l,contentTitle:()=>p,metadata:()=>s,toc:()=>d,default:()=>m});var a=n(3117),r=n(102),i=(n(7294),n(3905)),o=["components"],l={id:"introduction",title:"Introduction",slug:"/"},p=void 0,s={unversionedId:"introduction",id:"introduction",title:"Introduction",description:"Motivation",source:"@site/docs/introduction.md",sourceDirName:".",slug:"/",permalink:"/ts-belt/docs/",editUrl:"https://github.com/mobily/ts-belt/edit/master/docs/docs/introduction.md",tags:[],version:"current",frontMatter:{id:"introduction",title:"Introduction",slug:"/"},sidebar:"sidebar",next:{title:"Installation",permalink:"/ts-belt/docs/getting-started/installation"}},d=[{value:"Motivation",id:"motivation",children:[{value:"Ramda \u2b07\ufe0f",id:"ramda-\ufe0f",children:[],level:4},{value:"Rambda \u2b07\ufe0f",id:"rambda-\ufe0f",children:[],level:4},{value:"Remeda \u2b07\ufe0f",id:"remeda-\ufe0f",children:[],level:4},{value:"TS Belt \u2b07\ufe0f",id:"ts-belt-\ufe0f",children:[],level:4}],level:3},{value:"Features",id:"features",children:[],level:3}],c={toc:d};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"motivation"},"Motivation"),(0,i.kt)("p",null,"I have to say it: I like ",(0,i.kt)("a",{parentName:"p",href:"https://rescript-lang.org/"},"ReScript"),". Its features and tooling provide a great developer experience. I wish it was my main tool at work, however\u2026it isn't, since most of the commercial projects I have worked on recently have been built with TypeScript. This is fully understandable from a business perspective because it is easier to find developers who are familiar with TypeScript \xaf","\\","_","(\u30c4)","_","/\xaf."),(0,i.kt)("p",null,"I like the functional programming (FP) paradigm, and I follow FP principles in almost every project I work on. Therefore, in the past few years I have been able to test and use some JavaScript/TypeScript libraries that follow these principles."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Below are my opinions and thoughts on FP libraries that I have previously used on a daily basis at work, and I fully understand if you disagree with them."))),(0,i.kt)("h4",{id:"ramda-\ufe0f"},"Ramda \u2b07\ufe0f"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Pros:"),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"Ramda")," is a mature project, it contains tons of utility functions, and has great, detailed documentation."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Cons:"),"\nUsing the ",(0,i.kt)("inlineCode",{parentName:"p"},"pipe")," function feels unnatural (for example: ",(0,i.kt)("inlineCode",{parentName:"p"},"pipe(fn1, fn2)(value)"),"), TypeScript support is neglected (the type inference simply doesn\u2019t work well), and the ",(0,i.kt)("inlineCode",{parentName:"p"},"data-last")," approach makes code less readable."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Comment:"),"\nSince ",(0,i.kt)("inlineCode",{parentName:"p"},"Ramda")," doesn't play well with TypeScript, I only found it useful in JavaScript-based projects."),(0,i.kt)("h4",{id:"rambda-\ufe0f"},"Rambda \u2b07\ufe0f"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Pros:"),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"Rambda")," is super fast, and I really mean it: it\u2019s difficult (but not impossible) to beat ",(0,i.kt)("inlineCode",{parentName:"p"},"rambda")," in terms of overall performance!"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Cons:"),"\nSimilar problems to ",(0,i.kt)("inlineCode",{parentName:"p"},"ramda"),"."),(0,i.kt)("h4",{id:"remeda-\ufe0f"},"Remeda \u2b07\ufe0f"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Pros:"),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"Remeda")," provides a ",(0,i.kt)("inlineCode",{parentName:"p"},"data-first")," approach, which is more natural and developer friendly. ",(0,i.kt)("inlineCode",{parentName:"p"},"remeda")," has good documentation, and its TypeScript support is great."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Cons:"),"\nAccording to my ",(0,i.kt)("a",{parentName:"p",href:"/benchmarks/introduction"},"benchmark results"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"remeda")," is the slowest compared to the other libraries. Its use of lazy evaluation also makes it unclear how to use some utility functions within a pipeline."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Comment:"),"\nIt's been my first choice for a long time."),(0,i.kt)("h4",{id:"ts-belt-\ufe0f"},"TS Belt \u2b07\ufe0f"),(0,i.kt)("p",null,"Until\u2026I decided to build ",(0,i.kt)("inlineCode",{parentName:"p"},"ts-belt"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"ts-belt")," combines all of the good things you can find in other similar libraries: the developer friendly ",(0,i.kt)("inlineCode",{parentName:"p"},"data-first")," approach, good documentation, great TypeScript support, and last but not least, it's as fast as ",(0,i.kt)("inlineCode",{parentName:"p"},"rambda")," (actually, it's even faster \ud83d\ude4a). Under the hood it uses ReScript and the ",(0,i.kt)("inlineCode",{parentName:"p"},"Belt")," standard library. The ReScript compiler generates highly performant JavaScript code, and with ",(0,i.kt)("a",{parentName:"p",href:"https://rescript-lang.org/docs/gentype/latest/introduction"},(0,i.kt)("inlineCode",{parentName:"a"},"genType"))," it automatically generates TypeScript signatures. ",(0,i.kt)("inlineCode",{parentName:"p"},"ts-belt")," is also easily extendable because most of the build process is done automatically."),(0,i.kt)("h3",{id:"features"},"Features"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\ud83d\ude80 built with ReScript, which generates highly performant JavaScript code (see ",(0,i.kt)("a",{parentName:"li",href:"/benchmarks/introduction"},"benchmark results"),")"),(0,i.kt)("li",{parentName:"ul"},"\ud83d\udc40 provides more readable code, due to the ",(0,i.kt)("inlineCode",{parentName:"li"},"data-first")," approach"),(0,i.kt)("li",{parentName:"ul"},"\u2728 supports ",(0,i.kt)("inlineCode",{parentName:"li"},"TypeScript")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"Flow")),(0,i.kt)("li",{parentName:"ul"},"\ud83d\udee1 helps you write safer code with ",(0,i.kt)("inlineCode",{parentName:"li"},"Option")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"Result")," types"),(0,i.kt)("li",{parentName:"ul"},"\ud83c\udfaf all functions return immutable data (no side-effects)"),(0,i.kt)("li",{parentName:"ul"},"\ud83c\udf32 tree-shakeable"),(0,i.kt)("li",{parentName:"ul"},"\ud83d\udcdd fully documented")))}m.isMDXComponent=!0}}]);