"use strict";(self.webpackChunkts_belt_docs=self.webpackChunkts_belt_docs||[]).push([[564],{3905:(e,n,a)=>{a.d(n,{Zo:()=>s,kt:()=>A});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=t.createContext({}),p=function(e){var n=t.useContext(d),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},s=function(e){var n=p(e.components);return t.createElement(d.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},y=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),y=p(a),A=r,c=y["".concat(d,".").concat(A)]||y[A]||u[A]||l;return a?t.createElement(c,i(i({ref:n},s),{},{components:a})):t.createElement(c,i({ref:n},s))}));function A(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=y;var o={};for(var d in n)hasOwnProperty.call(n,d)&&(o[d]=n[d]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}y.displayName="MDXCreateElement"},9157:(e,n,a)=>{a.r(n),a.d(n,{contentTitle:()=>y,default:()=>h,frontMatter:()=>u,metadata:()=>A,toc:()=>c});var t=a(3117),r=a(102),l=(a(7294),a(3905)),i=["components"],o=[{value:"append",id:"append",children:[],level:3},{value:"at",id:"at",children:[],level:3},{value:"concat",id:"concat",children:[],level:3},{value:"concatMany",id:"concatmany",children:[],level:3},{value:"copy",id:"copy",children:[],level:3},{value:"deepFlat",id:"deepflat",children:[],level:3},{value:"drop",id:"drop",children:[],level:3},{value:"dropExactly",id:"dropexactly",children:[],level:3},{value:"dropWhile",id:"dropwhile",children:[],level:3},{value:"eq",id:"eq",children:[],level:3},{value:"every",id:"every",children:[],level:3},{value:"filter",id:"filter",children:[],level:3},{value:"filterMap",id:"filtermap",children:[],level:3},{value:"filterWithIndex",id:"filterwithindex",children:[],level:3},{value:"find",id:"find",children:[],level:3},{value:"flat",id:"flat",children:[],level:3},{value:"flip",id:"flip",children:[],level:3},{value:"forEach",id:"foreach",children:[],level:3},{value:"forEachWithIndex",id:"foreachwithindex",children:[],level:3},{value:"get",id:"get",children:[],level:3},{value:"getBy",id:"getby",children:[],level:3},{value:"getIndexBy",id:"getindexby",children:[],level:3},{value:"getUndefined",id:"getundefined",children:[],level:3},{value:"getUnsafe",id:"getunsafe",children:[],level:3},{value:"groupBy",id:"groupby",children:[],level:3},{value:"head",id:"head",children:[],level:3},{value:"includes",id:"includes",children:[],level:3},{value:"init",id:"init",children:[],level:3},{value:"initOrEmpty",id:"initorempty",children:[],level:3},{value:"insertAt",id:"insertat",children:[],level:3},{value:"intersperse",id:"intersperse",children:[],level:3},{value:"isEmpty",id:"isempty",children:[],level:3},{value:"isNotEmpty",id:"isnotempty",children:[],level:3},{value:"join",id:"join",children:[],level:3},{value:"keep",id:"keep",children:[],level:3},{value:"keepMap",id:"keepmap",children:[],level:3},{value:"keepWithIndex",id:"keepwithindex",children:[],level:3},{value:"last",id:"last",children:[],level:3},{value:"length",id:"length",children:[],level:3},{value:"make",id:"make",children:[],level:3},{value:"makeEmpty",id:"makeempty",children:[],level:3},{value:"makeWithIndex",id:"makewithindex",children:[],level:3},{value:"map",id:"map",children:[],level:3},{value:"mapWithIndex",id:"mapwithindex",children:[],level:3},{value:"partition",id:"partition",children:[],level:3},{value:"prepend",id:"prepend",children:[],level:3},{value:"prependToAll",id:"prependtoall",children:[],level:3},{value:"range",id:"range",children:[],level:3},{value:"rangeBy",id:"rangeby",children:[],level:3},{value:"reduce",id:"reduce",children:[],level:3},{value:"reduceReverse",id:"reducereverse",children:[],level:3},{value:"reduceWithIndex",id:"reducewithindex",children:[],level:3},{value:"reject",id:"reject",children:[],level:3},{value:"rejectWithIndex",id:"rejectwithindex",children:[],level:3},{value:"removeAt",id:"removeat",children:[],level:3},{value:"removeFirst",id:"removefirst",children:[],level:3},{value:"removeFirstBy",id:"removefirstby",children:[],level:3},{value:"repeat",id:"repeat",children:[],level:3},{value:"replaceAt",id:"replaceat",children:[],level:3},{value:"reverse",id:"reverse",children:[],level:3},{value:"shuffle",id:"shuffle",children:[],level:3},{value:"slice",id:"slice",children:[],level:3},{value:"sliceToEnd",id:"slicetoend",children:[],level:3},{value:"some",id:"some",children:[],level:3},{value:"sort",id:"sort",children:[],level:3},{value:"sortBy",id:"sortby",children:[],level:3},{value:"splitAt",id:"splitat",children:[],level:3},{value:"splitEvery",id:"splitevery",children:[],level:3},{value:"swapAt",id:"swapat",children:[],level:3},{value:"tail",id:"tail",children:[],level:3},{value:"tailOrEmpty",id:"tailorempty",children:[],level:3},{value:"take",id:"take",children:[],level:3},{value:"takeExactly",id:"takeexactly",children:[],level:3},{value:"takeWhile",id:"takewhile",children:[],level:3},{value:"tap",id:"tap",children:[],level:3},{value:"toTuple",id:"totuple",children:[],level:3},{value:"uncons",id:"uncons",children:[],level:3},{value:"uniq",id:"uniq",children:[],level:3},{value:"uniqBy",id:"uniqby",children:[],level:3},{value:"unzip",id:"unzip",children:[],level:3},{value:"updateAt",id:"updateat",children:[],level:3},{value:"zip",id:"zip",children:[],level:3},{value:"zipWith",id:"zipwith",children:[],level:3},{value:"zipWithIndex",id:"zipwithindex",children:[],level:3}],d={toc:o};function p(e){var n=e.components,a=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,t.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h3",{id:"append"},"append"),(0,l.kt)("p",null,"Adds a single element to the end of an array."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function append<A>(xs: ReadonlyArray<A>, element: A): ReadonlyArray<A>\nfunction append<A>(element: A): (xs: ReadonlyArray<A>) => ReadonlyArray<A>\n")),(0,l.kt)("h3",{id:"at"},"at"),(0,l.kt)("p",null,"Alias for ",(0,l.kt)("inlineCode",{parentName:"p"},"get"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function at<A>(xs: ReadonlyArray<A>, index: number): Option<A>\nfunction at<A>(index: number): (xs: ReadonlyArray<A>) => Option<A>\n")),(0,l.kt)("h3",{id:"concat"},"concat"),(0,l.kt)("p",null,"Returns a new array containing the concatenation of two provided arrays."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function concat<A>(xs1: ReadonlyArray<A>): (xs0: ReadonlyArray<A>) => ReadonlyArray<A>\nfunction concat<A>(xs0: ReadonlyArray<A>, xs1: ReadonlyArray<A>): ReadonlyArray<A>\n")),(0,l.kt)("h3",{id:"concatmany"},"concatMany"),(0,l.kt)("p",null,"Returns a new array as the concatenation of the provided array of arrays."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function concatMany<A>(xs: ReadonlyArray<ReadonlyArray<A>>): ReadonlyArray<A>\n")),(0,l.kt)("h3",{id:"copy"},"copy"),(0,l.kt)("p",null,"Returns a copy of the provided array."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function copy<A>(xs: ReadonlyArray<A>): ReadonlyArray<A>\n")),(0,l.kt)("h3",{id:"deepflat"},"deepFlat"),(0,l.kt)("p",null,"Creates a new array with all sub-array elements concatenated into it recursively up to the ",(0,l.kt)("inlineCode",{parentName:"p"},"Infinite")," depth."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function deepFlat<A>(xs: ReadonlyArray<A>): ReadonlyArray<ExtractNested<A>>\n")),(0,l.kt)("h3",{id:"drop"},"drop"),(0,l.kt)("p",null,"Returns a new array that does not contain the first ",(0,l.kt)("inlineCode",{parentName:"p"},"n")," elements of the provided array, or an empty array if ",(0,l.kt)("inlineCode",{parentName:"p"},"n")," is either less than ",(0,l.kt)("inlineCode",{parentName:"p"},"0")," or greater than the length of the provided array."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function drop<A>(xs: ReadonlyArray<A>, n: number): ReadonlyArray<A>\nfunction drop<A>(n: number): (xs: ReadonlyArray<A>) => ReadonlyArray<A>\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"A.drop([1], 1) // \u2192 []\nA.drop([1, 2, 3], 4) // \u2192 []\nA.drop([1, 2, 3], 2) // \u2192 [3]\npipe([1, 2, 3, 4], A.drop(2)) // \u2192 [3, 4]\n")),(0,l.kt)("h3",{id:"dropexactly"},"dropExactly"),(0,l.kt)("p",null,"Returns a new array (",(0,l.kt)("inlineCode",{parentName:"p"},"Some(xs)"),") that does not contain the first ",(0,l.kt)("inlineCode",{parentName:"p"},"n")," elements of the provided array, or ",(0,l.kt)("inlineCode",{parentName:"p"},"None")," if ",(0,l.kt)("inlineCode",{parentName:"p"},"n")," is either less than ",(0,l.kt)("inlineCode",{parentName:"p"},"0")," or greater than the length of the provided array."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function dropExactly<A>(xs: ReadonlyArray<A>, n: number): Option<ReadonlyArray<A>>\nfunction dropExactly<A>(n: number): (xs: ReadonlyArray<A>) => Option<ReadonlyArray<A>>\n")),(0,l.kt)("h3",{id:"dropwhile"},"dropWhile"),(0,l.kt)("p",null,"Drops elements from the beginning of the array until an element is reached which does not satisfy the given predicate."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function dropWhile<A>(xs: ReadonlyArray<A>, predicateFn: (_1: A) => boolean): ReadonlyArray<A>\nfunction dropWhile<A>(predicateFn: (_1: A) => boolean): (xs: ReadonlyArray<A>) => ReadonlyArray<A>\n")),(0,l.kt)("h3",{id:"eq"},"eq"),(0,l.kt)("p",null,"Returns ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," if length of both arrays is not the same, otherwise compares elements one by one using the comparator."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function eq<A>(\n    xs0: ReadonlyArray<A>,\n    xs1: ReadonlyArray<A>,\n    comparatorFn: (_1: A, _2: A) => boolean\n): boolean\nfunction eq<A>(xs1: ReadonlyArray<A>, comparatorFn: (_1: A, _2: A) => boolean): (xs0: ReadonlyArray<A>) => boolean\n")),(0,l.kt)("h3",{id:"every"},"every"),(0,l.kt)("p",null,"Returns `true`` if all elements satisfy the given predicate."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function every<A>(xs: ReadonlyArray<A>, fn: (_1: A) => boolean): boolean\nfunction every<A>(fn: (_1: A) => boolean): (xs: ReadonlyArray<A>) => boolean\n")),(0,l.kt)("h3",{id:"filter"},"filter"),(0,l.kt)("p",null,"Returns a new array that keep all elements satisfy the given predicate."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function filter<A, B extends A>(xs: ReadonlyArray<A>, predicateFn: (value: A) => value is B): ReadonlyArray<B>\nfunction filter<A, B extends A>(predicateFn: (value: A) => value is B): (xs: ReadonlyArray<A>) => ReadonlyArray<B>\nfunction filter<A>(xs: ReadonlyArray<A>, predicateFn: (value: A) => boolean): ReadonlyArray<A>\nfunction filter<A>(predicateFn: (value: A) => boolean): (xs: ReadonlyArray<A>) => ReadonlyArray<A>\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"A.filter([1, 2, 3, 4], value => value % 2 === 0) // \u2192 [2, 4]\npipe(\n  [1, 2, 3, 4, 5, 6, 7, 8, 9],\n  A.filter(value => value % 2 === 0),\n) // \u2192 [2, 4, 6, 8]\n\npipe(\n  ['hello', 'wo', 'rld'],\n  A.filter(value => value.length < 4),\n) // \u2192 ['wo', 'rld']\n")),(0,l.kt)("h3",{id:"filtermap"},"filterMap"),(0,l.kt)("p",null,"Returns a new array that keep all elements that return ",(0,l.kt)("inlineCode",{parentName:"p"},"Some(value)")," applied within ",(0,l.kt)("inlineCode",{parentName:"p"},"predicateFn"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function filterMap<A, B>(xs: ReadonlyArray<A>, predicateFn: (_1: A) => Option<B>): ReadonlyArray<B>\nfunction filterMap<A, B>(predicateFn: (_1: A) => Option<B>): (xs: ReadonlyArray<A>) => ReadonlyArray<B>\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"A.filterMap(['', 'hello', 'world', ''], value => {\n  return value.length > 0 ? O.Some(value.length) : O.None\n}) // \u2192 [5, 5]\n\npipe(\n  [1, 2, 3, 4, 5],\n  A.filterMap(value => {\n    return value % 2 === 0 ? O.Some(value * 2) : O.None\n  }),\n) // \u2192 [4, 8]\n")),(0,l.kt)("h3",{id:"filterwithindex"},"filterWithIndex"),(0,l.kt)("p",null,"Returns a new array that keep all elements satisfy the given predicate (which take two arguments: the element for the array and its index)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function filterWithIndex<A, B extends A>(xs: ReadonlyArray<A>, predicateFn: (index: number, value: A) => value is B): ReadonlyArray<B>\nfunction filterWithIndex<A, B extends A>(predicateFn: (index: number, value: A) => value is B): (xs: ReadonlyArray<A>) => ReadonlyArray<B>\nfunction filterWithIndex<A>(xs: ReadonlyArray<A>, predicateFn: (index: number, value: A) => boolean): ReadonlyArray<A>\nfunction filterWithIndex<A>(predicateFn: (index: number, value: A) => boolean): (xs: ReadonlyArray<A>) => ReadonlyArray<A>\n")),(0,l.kt)("h3",{id:"find"},"find"),(0,l.kt)("p",null,"Alias for ",(0,l.kt)("inlineCode",{parentName:"p"},"getBy"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function find<A>(xs: ReadonlyArray<A>, predicateFn: (_1: A) => boolean): Option<A>\nfunction find<A>(predicateFn: (_1: A) => boolean): (xs: ReadonlyArray<A>) => Option<A>\n")),(0,l.kt)("h3",{id:"flat"},"flat"),(0,l.kt)("p",null,"Creates a new array with all sub-array elements concatenated into it (the single level depth)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function flat<A>(xs: ReadonlyArray<A>): ReadonlyArray<A extends ReadonlyArray<infer B> ? B : A>\n")),(0,l.kt)("h3",{id:"flip"},"flip"),(0,l.kt)("p",null,"Returns a new tuple with the reverse order of the elements."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function flip<A, B>(xs: readonly [A, B]): readonly [B, A]\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"A.flip([1, 2]) // \u2192 [2, 1]\npipe(\n  { name: 'Joe', location: 'Warsaw' },\n  D.toPairs,\n  A.map(A.flip),\n  D.fromPairs,\n) // \u2192 { Joe: 'name', Warsaw: 'location' }\n")),(0,l.kt)("h3",{id:"foreach"},"forEach"),(0,l.kt)("p",null,"Calls ",(0,l.kt)("inlineCode",{parentName:"p"},"fn")," on each element of the provided array."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function forEach<A>(xs: ReadonlyArray<A>, fn: (_1: A) => void): void\nfunction forEach<A>(fn: (_1: A) => void): (xs: ReadonlyArray<A>) => void\n")),(0,l.kt)("h3",{id:"foreachwithindex"},"forEachWithIndex"),(0,l.kt)("p",null,"Calls ",(0,l.kt)("inlineCode",{parentName:"p"},"fn")," (which takes two arguments: the element from array and its index) on each element of the provided array."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function forEachWithIndex<A>(xs: ReadonlyArray<A>, fn: (_1: number, _2: A) => void): void\nfunction forEachWithIndex<A>(fn: (_1: number, _2: A) => void): (xs: ReadonlyArray<A>) => void\n")),(0,l.kt)("h3",{id:"get"},"get"),(0,l.kt)("p",null,"Returns ",(0,l.kt)("inlineCode",{parentName:"p"},"Some(value)")," at the given index, or ",(0,l.kt)("inlineCode",{parentName:"p"},"None")," if the given index is out of range."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function get<A>(xs: ReadonlyArray<A>, index: number): Option<A>\nfunction get<A>(index: number): (xs: ReadonlyArray<A>) => Option<A>\n")),(0,l.kt)("h3",{id:"getby"},"getBy"),(0,l.kt)("p",null,"Returns ",(0,l.kt)("inlineCode",{parentName:"p"},"Some(value)")," for the first element in the array that satisifies the given predicate function, or ",(0,l.kt)("inlineCode",{parentName:"p"},"None")," if no element satisifies the predicate."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function getBy<A>(xs: ReadonlyArray<A>, predicateFn: (_1: A) => boolean): Option<A>\nfunction getBy<A>(predicateFn: (_1: A) => boolean): (xs: ReadonlyArray<A>) => Option<A>\n")),(0,l.kt)("h3",{id:"getindexby"},"getIndexBy"),(0,l.kt)("p",null,"Returns ",(0,l.kt)("inlineCode",{parentName:"p"},"Some(index)")," for the first value in the provided array that satisifies the predicate function."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function getIndexBy<A>(xs: ReadonlyArray<A>, predicateFn: (_1: A) => boolean): Option<number>\nfunction getIndexBy<A>(predicateFn: (_1: A) => boolean): (xs: ReadonlyArray<A>) => Option<number>\n")),(0,l.kt)("h3",{id:"getundefined"},"getUndefined"),(0,l.kt)("p",null,"Returns ",(0,l.kt)("inlineCode",{parentName:"p"},"value")," at the given index, or ",(0,l.kt)("inlineCode",{parentName:"p"},"undefined")," if the given index is out of range."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function getUndefined<A>(xs: ReadonlyArray<A>, index: number): A | undefined\nfunction getUndefined<A>(index: number): (xs: ReadonlyArray<A>) => A | undefined\n")),(0,l.kt)("h3",{id:"getunsafe"},"getUnsafe"),(0,l.kt)("p",null,"Returns ",(0,l.kt)("inlineCode",{parentName:"p"},"value")," at the given index (use only if you're entirely sure that a value exists at the given index)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function getUnsafe<A>(xs: ReadonlyArray<A>, index: number): A\nfunction getUnsafe<A>(index: number): (xs: ReadonlyArray<A>) => A\n")),(0,l.kt)("h3",{id:"groupby"},"groupBy"),(0,l.kt)("p",null,"Splits the given array into sub-arrays in an object, grouped by the result of running each value through the provided function."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function groupBy<A, B extends PropertyKey>(xs: ReadonlyArray<A>, groupFn: (item: A) => B): Partial<Record<B, readonly [A, ...A[]]>>\nfunction groupBy<A, B extends PropertyKey>(groupFn: (item: A) => B): (xs: ReadonlyArray<A>) => Partial<Record<B, readonly [A, ...A[]]>>\n")),(0,l.kt)("h3",{id:"head"},"head"),(0,l.kt)("p",null,"Returns ",(0,l.kt)("inlineCode",{parentName:"p"},"Some(value)")," where ",(0,l.kt)("inlineCode",{parentName:"p"},"value")," is the first element of the array, or ",(0,l.kt)("inlineCode",{parentName:"p"},"None")," if the given array is empty."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function head<A>(xs: ReadonlyArray<A>): Option<A>\n")),(0,l.kt)("h3",{id:"includes"},"includes"),(0,l.kt)("p",null,"Returns ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," if the provided value is equal to at least one element of the given array."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function includes<A>(xs: ReadonlyArray<A>, value: A): boolean\nfunction includes<A>(value: A): (xs: ReadonlyArray<A>) => boolean\n")),(0,l.kt)("h3",{id:"init"},"init"),(0,l.kt)("p",null,"Returns a new array (",(0,l.kt)("inlineCode",{parentName:"p"},"Some(xs)"),") with all elements except the last of the provided array."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function init<A>(xs: ReadonlyArray<A>): Option<ReadonlyArray<A>>\n")),(0,l.kt)("h3",{id:"initorempty"},"initOrEmpty"),(0,l.kt)("p",null,"Returns a new array with all elements except the last of the provided array, or an empty array if the given array is empty."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function initOrEmpty<A>(xs: ReadonlyArray<A>): ReadonlyArray<A>\n")),(0,l.kt)("h3",{id:"insertat"},"insertAt"),(0,l.kt)("p",null,"Creates a new array that inserts the given value at the given index (no insertion is made if the index is out of range)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function insertAt<A>(xs: ReadonlyArray<A>, targetIndex: number, element: A): ReadonlyArray<A>\nfunction insertAt<A>(targetIndex: number, element: A): (xs: ReadonlyArray<A>) => ReadonlyArray<A>\n")),(0,l.kt)("h3",{id:"intersperse"},"intersperse"),(0,l.kt)("p",null,"Creates a new array with the separator interposed between elements."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function intersperse<A>(xs: ReadonlyArray<A>, delimiter: A): ReadonlyArray<A>\nfunction intersperse<A>(delimiter: A): (xs: ReadonlyArray<A>) => ReadonlyArray<A>\n")),(0,l.kt)("h3",{id:"isempty"},"isEmpty"),(0,l.kt)("p",null,"Determines whether the given array is empty."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function isEmpty<A>(xs: ReadonlyArray<A>): boolean\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"A.isEmpty(['hello', 'world']) // \u2192 false\nA.isEmpty([]) // \u2192 true\npipe([1, 2, 3], A.isEmpty) // \u2192 false\n")),(0,l.kt)("h3",{id:"isnotempty"},"isNotEmpty"),(0,l.kt)("p",null,"Determines whether the given array is not empty."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function isNotEmpty<A>(xs: ReadonlyArray<A>): boolean\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"A.isNotEmpty(['hello', 'world']) // \u2192 true\nA.isNotEmpty([]) // \u2192 false\npipe([1, 2, 3], A.isNotEmpty) // \u2192 true\n")),(0,l.kt)("h3",{id:"join"},"join"),(0,l.kt)("p",null,"Converts each element of the array to a string and concatenates them, separated by the given string."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function join<A>(xs: ReadonlyArray<A>, delimiter: string): string\nfunction join<A>(delimiter: string): (xs: ReadonlyArray<A>) => string\n")),(0,l.kt)("h3",{id:"keep"},"keep"),(0,l.kt)("p",null,"Alias for ",(0,l.kt)("inlineCode",{parentName:"p"},"filter"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function keep<A, B extends A>(xs: ReadonlyArray<A>, predicateFn: (value: A) => value is B): ReadonlyArray<B>\nfunction keep<A, B extends A>(predicateFn: (value: A) => value is B): (xs: ReadonlyArray<A>) => ReadonlyArray<B>\nfunction keep<A>(xs: ReadonlyArray<A>, predicateFn: (value: A) => boolean): ReadonlyArray<A>\nfunction keep<A>(predicateFn: (value: A) => boolean): (xs: ReadonlyArray<A>) => ReadonlyArray<A>\n")),(0,l.kt)("h3",{id:"keepmap"},"keepMap"),(0,l.kt)("p",null,"Alias for ",(0,l.kt)("inlineCode",{parentName:"p"},"filterMap"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function keepMap<A, B>(xs: ReadonlyArray<A>, predicateFn: (_1: A) => Option<B>): ReadonlyArray<B>\nfunction keepMap<A, B>(predicateFn: (_1: A) => Option<B>): (xs: ReadonlyArray<A>) => ReadonlyArray<B>\n")),(0,l.kt)("h3",{id:"keepwithindex"},"keepWithIndex"),(0,l.kt)("p",null,"Alias for ",(0,l.kt)("inlineCode",{parentName:"p"},"filterWithIndex"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function keepWithIndex<A, B extends A>(xs: ReadonlyArray<A>, predicateFn: (index: number, value: A) => value is B): ReadonlyArray<B>\nfunction keepWithIndex<A, B extends A>(predicateFn: (index: number, value: A) => value is B): (xs: ReadonlyArray<A>) => ReadonlyArray<B>\nfunction keepWithIndex<A>(xs: ReadonlyArray<A>, predicateFn: (index: number, value: A) => boolean): ReadonlyArray<A>\nfunction keepWithIndex<A>(predicateFn: (index: number, value: A) => boolean): (xs: ReadonlyArray<A>) => ReadonlyArray<A>\n")),(0,l.kt)("h3",{id:"last"},"last"),(0,l.kt)("p",null,"Returns the last element (",(0,l.kt)("inlineCode",{parentName:"p"},"Some(value)"),") in the array, or ",(0,l.kt)("inlineCode",{parentName:"p"},"None")," if the given array is empty."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function last<A>(xs: ReadonlyArray<A>): Option<A>\n")),(0,l.kt)("h3",{id:"length"},"length"),(0,l.kt)("p",null,"Returns the size of the provided array."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function length<A>(xs: ReadonlyArray<A>): number\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"A.length(['hello', 'world']) // \u2192 2\npipe([0, 2, 4], A.length) // \u2192 3\n")),(0,l.kt)("h3",{id:"make"},"make"),(0,l.kt)("p",null,"Returns a new array of size ",(0,l.kt)("inlineCode",{parentName:"p"},"n")," populated by ",(0,l.kt)("inlineCode",{parentName:"p"},"element"),", or an empty array if ",(0,l.kt)("inlineCode",{parentName:"p"},"n")," is negative."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function make<A>(n: number, element: A): ReadonlyArray<A>\nfunction make<A>(element: A): (n: number) => ReadonlyArray<A>\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"A.make(-1, 'hello') // \u2192 []\nA.make(3, 1) // \u2192 [1, 1, 1]\npipe(2, A.make('hello')) // \u2192 ['hello', 'hello']\n")),(0,l.kt)("h3",{id:"makeempty"},"makeEmpty"),(0,l.kt)("p",null,"Creates an empty array. Alternative for ",(0,l.kt)("inlineCode",{parentName:"p"},"const xs = [] as ReadonlyArray<A>"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function makeEmpty<A>(): ReadonlyArray<A>\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"A.makeEmpty<number>() // \u2192 []\n")),(0,l.kt)("h3",{id:"makewithindex"},"makeWithIndex"),(0,l.kt)("p",null,"Returns a new array of size ",(0,l.kt)("inlineCode",{parentName:"p"},"n")," populated by ",(0,l.kt)("inlineCode",{parentName:"p"},"mapFn(index)"),", or an empty array if ",(0,l.kt)("inlineCode",{parentName:"p"},"n")," is negative."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function makeWithIndex<A>(n: number, mapFn: (_1: number) => A): ReadonlyArray<A>\nfunction makeWithIndex<A>(mapFn: (_1: number) => A): (n: number) => ReadonlyArray<A>\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"A.makeWithIndex(5, index => index * 2) // \u2192 [0, 2, 4, 6, 8]\n")),(0,l.kt)("h3",{id:"map"},"map"),(0,l.kt)("p",null,"Returns a new array by calling ",(0,l.kt)("inlineCode",{parentName:"p"},"mapFn")," for each element of the provided array."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function map<A, B>(xs: ReadonlyArray<A>, mapFn: (_1: A) => B): ReadonlyArray<B>\nfunction map<A, B>(mapFn: (_1: A) => B): (xs: ReadonlyArray<A>) => ReadonlyArray<B>\n")),(0,l.kt)("h3",{id:"mapwithindex"},"mapWithIndex"),(0,l.kt)("p",null,"Returns a new array by calling ",(0,l.kt)("inlineCode",{parentName:"p"},"mapFn")," (which takes two arguments: the element from array and its index) for each element of the provided array."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function mapWithIndex<A, B>(xs: ReadonlyArray<A>, mapFn: (_1: number, _2: A) => B): ReadonlyArray<B>\nfunction mapWithIndex<A, B>(mapFn: (_1: number, _2: A) => B): (xs: ReadonlyArray<A>) => ReadonlyArray<B>\n")),(0,l.kt)("h3",{id:"partition"},"partition"),(0,l.kt)("p",null,"Splits the provided array into two separate arrays - one containing elements which satisfy the predicate, and the other array containing the elements which do not satisfy the predicate."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function partition<A, B extends A>(xs: ReadonlyArray<A>, predicateFn: (value: A) => value is B): readonly [ReadonlyArray<B>, ReadonlyArray<Exclude<A, B>>]\nfunction partition<A, B extends A>(predicateFn: (value: A) => value is B): (\n  xs: ReadonlyArray<A>,\n) => readonly [ReadonlyArray<B>, ReadonlyArray<Exclude<A, B>>]\nfunction partition<A>(xs: ReadonlyArray<A>, predicateFn: (value: A) => boolean): readonly [ReadonlyArray<A>, ReadonlyArray<A>]\nfunction partition<A>(predicateFn: (value: A) => boolean): (xs: ReadonlyArray<A>) => readonly [ReadonlyArray<A>, ReadonlyArray<A>]\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"A.partition([1, 2, 3, 4], value => value > 2) // \u2192 [[3, 4],[1, 2]]\npipe([1, 'hello', 2, 'world'], A.partition(G.isString)) // \u2192 [['hello', 'world'], [1, 2]]\n")),(0,l.kt)("h3",{id:"prepend"},"prepend"),(0,l.kt)("p",null,"Prepends a single element to the start of the given array."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function prepend<A>(xs: ReadonlyArray<A>, element: A): ReadonlyArray<A>\nfunction prepend<A>(element: A): (xs: ReadonlyArray<A>) => ReadonlyArray<A>\n")),(0,l.kt)("h3",{id:"prependtoall"},"prependToAll"),(0,l.kt)("p",null,"Returns a new array which contains the given delimiter inserted before every element in the provided array."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function prependToAll<A>(xs: ReadonlyArray<A>, delimiter: A): ReadonlyArray<A>\nfunction prependToAll<A>(delimiter: A): (xs: ReadonlyArray<A>) => ReadonlyArray<A>\n")),(0,l.kt)("h3",{id:"range"},"range"),(0,l.kt)("p",null,"Returns a new array of numbers from ",(0,l.kt)("inlineCode",{parentName:"p"},"start")," (inclusive) to ",(0,l.kt)("inlineCode",{parentName:"p"},"finish")," (exclusive)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function range(finish: number): (start: number) => ReadonlyArray<number>\nfunction range(start: number, finish: number): ReadonlyArray<number>\n")),(0,l.kt)("h3",{id:"rangeby"},"rangeBy"),(0,l.kt)("p",null,"Returns a new array of numbers from ",(0,l.kt)("inlineCode",{parentName:"p"},"start")," (inclusive) to ",(0,l.kt)("inlineCode",{parentName:"p"},"finish")," (exclusive)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function rangeBy(finish: number, step: number): (start: number) => ReadonlyArray<number>\nfunction rangeBy(start: number, finish: number, step: number): ReadonlyArray<number>\n")),(0,l.kt)("h3",{id:"reduce"},"reduce"),(0,l.kt)("p",null,"Applies ",(0,l.kt)("inlineCode",{parentName:"p"},"reduceFn")," (which has two parameters: an ",(0,l.kt)("inlineCode",{parentName:"p"},"accumulator")," which starts with a value of ",(0,l.kt)("inlineCode",{parentName:"p"},"initialValue")," and the next value from the array) to each element of the provided array, and eventually it returns the final value of the accumulator."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function reduce<A, B>(xs: ReadonlyArray<A>, initialValue: B, reduceFn: (_1: B, _2: A) => B): B\nfunction reduce<A, B>(initialValue: B, reduceFn: (_1: B, _2: A) => B): (xs: ReadonlyArray<A>) => B\n")),(0,l.kt)("h3",{id:"reducereverse"},"reduceReverse"),(0,l.kt)("p",null,"Works like A.reduce, except that the function ",(0,l.kt)("inlineCode",{parentName:"p"},"reduceFn")," is applied to each item of ",(0,l.kt)("inlineCode",{parentName:"p"},"xs")," from the last back to the first."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function reduceReverse<A, B>(xs: ReadonlyArray<A>, initialValue: B, reduceFn: (_1: B, _2: A) => B): B\nfunction reduceReverse<A, B>(initialValue: B, reduceFn: (_1: B, _2: A) => B): (xs: ReadonlyArray<A>) => B\n")),(0,l.kt)("h3",{id:"reducewithindex"},"reduceWithIndex"),(0,l.kt)("p",null,"Applies ",(0,l.kt)("inlineCode",{parentName:"p"},"reduceFn")," (which has three parameters: an ",(0,l.kt)("inlineCode",{parentName:"p"},"accumulator")," which starts with a value of ",(0,l.kt)("inlineCode",{parentName:"p"},"initialValue"),", the next value from the array and its index) to each element of the provided array, and eventually it returns the final value of the accumulator."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function reduceWithIndex<A, B>(\n    xs: ReadonlyArray<A>,\n    initialValue: B,\n    reduceFn: (_1: B, _2: A, _3: number) => B\n): B\nfunction reduceWithIndex<A, B>(initialValue: B, reduceFn: (_1: B, _2: A, _3: number) => B): (xs: ReadonlyArray<A>) => B\n")),(0,l.kt)("h3",{id:"reject"},"reject"),(0,l.kt)("p",null,"Returns a new array of elements from the provided array which do not satisfy the given predicate."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function reject<A>(xs: ReadonlyArray<A>, predicateFn: (_1: A) => boolean): ReadonlyArray<A>\nfunction reject<A>(predicateFn: (_1: A) => boolean): (xs: ReadonlyArray<A>) => ReadonlyArray<A>\n")),(0,l.kt)("h3",{id:"rejectwithindex"},"rejectWithIndex"),(0,l.kt)("p",null,"Returns a new array of elements from the provided array which do not satisfy the given predicate (which take two arguments: the element for the array and its index)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function rejectWithIndex<A>(xs: ReadonlyArray<A>, predicateFn: (_1: number, _2: A) => boolean): ReadonlyArray<A>\nfunction rejectWithIndex<A>(predicateFn: (_1: number, _2: A) => boolean): (xs: ReadonlyArray<A>) => ReadonlyArray<A>\n")),(0,l.kt)("h3",{id:"removeat"},"removeAt"),(0,l.kt)("p",null,"Creates a new array without the element at the given index (the original array if the index is out of range)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function removeAt<A>(xs: ReadonlyArray<A>, targetIndex: number): ReadonlyArray<A>\nfunction removeAt<A>(targetIndex: number): (xs: ReadonlyArray<A>) => ReadonlyArray<A>\n")),(0,l.kt)("h3",{id:"removefirst"},"removeFirst"),(0,l.kt)("p",null,"Creates a copy of the given array with the first occurrence of the given element removed"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function removeFirst<A>(xs: ReadonlyArray<A>, value: A): ReadonlyArray<A>\nfunction removeFirst<A>(value: A): (xs: ReadonlyArray<A>) => ReadonlyArray<A>\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"A.removeFirst(['hello', 'hello', 'world'], 'hello') // \u2192 ['hello', 'world']\npipe([4, 5, 2, 1, 3], A.removeFirst(1)) // \u2192 [4, 5, 2, 3]\n")),(0,l.kt)("h3",{id:"removefirstby"},"removeFirstBy"),(0,l.kt)("p",null,"Removes the first occurrence of the given value from the array, using the given equality function."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function removeFirstBy<A, B>(xs: ReadonlyArray<A>, value: B, predicateFn: (_1: A, _2: B) => boolean): ReadonlyArray<A>\nfunction removeFirstBy<A, B>(value: B, predicateFn: (_1: A, _2: B) => boolean): (xs: ReadonlyArray<A>) => ReadonlyArray<A>\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"A.removeFirstBy([1, 2, 1, 3, 4], 2, N.gt) // \u2192 [1, 2, 1, 4]\npipe(\n  ['hello', 'wrld', 'world'],\n  A.removeFirstBy(4, (str, length) => str.length === length),\n) // \u2192 ['hello', 'world']\n")),(0,l.kt)("h3",{id:"repeat"},"repeat"),(0,l.kt)("p",null,"Alias for ",(0,l.kt)("inlineCode",{parentName:"p"},"make"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function repeat<A>(n: number, element: A): ReadonlyArray<A>\nfunction repeat<A>(element: A): (n: number) => ReadonlyArray<A>\n")),(0,l.kt)("h3",{id:"replaceat"},"replaceAt"),(0,l.kt)("p",null,"Creates a new array by replacing the value at the given index with the given value (no replacement is made if the index is out of range)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function replaceAt<A>(xs: ReadonlyArray<A>, targetIndex: number, element: A): ReadonlyArray<A>\nfunction replaceAt<A>(targetIndex: number, element: A): (xs: ReadonlyArray<A>) => ReadonlyArray<A>\n")),(0,l.kt)("h3",{id:"reverse"},"reverse"),(0,l.kt)("p",null,"Returns a new array with the elements of the provided array in reverse order."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function reverse<A>(xs: ReadonlyArray<A>): ReadonlyArray<A>\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"A.reverse([1, 2, 3, 4, 5]) // \u2192 [5, 4, 3, 2, 1]\npipe(['hello', 'world'], A.reverse) // \u2192 ['world', 'hello']\n")),(0,l.kt)("h3",{id:"shuffle"},"shuffle"),(0,l.kt)("p",null,"Returns a new array with elements in the original array randomly shuffled."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function shuffle<A>(xs: ReadonlyArray<A>): ReadonlyArray<A>\n")),(0,l.kt)("h3",{id:"slice"},"slice"),(0,l.kt)("p",null,"Returns a new array with the ",(0,l.kt)("inlineCode",{parentName:"p"},"len")," elements of the given array starting at ",(0,l.kt)("inlineCode",{parentName:"p"},"offset")," (offset can be negative)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function slice<A>(xs: ReadonlyArray<A>, offset: number, len: number): ReadonlyArray<A>\nfunction slice<A>(offset: number, len: number): (xs: ReadonlyArray<A>) => ReadonlyArray<A>\n")),(0,l.kt)("h3",{id:"slicetoend"},"sliceToEnd"),(0,l.kt)("p",null,"Returns a new array with the elements of the given array starting at ",(0,l.kt)("inlineCode",{parentName:"p"},"offset")," (offset can be negative)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function sliceToEnd<A>(xs: ReadonlyArray<A>, offset: number): ReadonlyArray<A>\nfunction sliceToEnd<A>(offset: number): (xs: ReadonlyArray<A>) => ReadonlyArray<A>\n")),(0,l.kt)("h3",{id:"some"},"some"),(0,l.kt)("p",null,"Returns ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," if at least one of the elements in the given array satifies the predicate."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function some<A>(xs: ReadonlyArray<A>, fn: (_1: A) => boolean): boolean\nfunction some<A>(fn: (_1: A) => boolean): (xs: ReadonlyArray<A>) => boolean\n")),(0,l.kt)("h3",{id:"sort"},"sort"),(0,l.kt)("p",null,"Returns a new array, sorted according to the comparator function."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function sort<A>(xs: ReadonlyArray<A>, sortFn: (_1: A, _2: A) => number): ReadonlyArray<A>\nfunction sort<A>(sortFn: (_1: A, _2: A) => number): (xs: ReadonlyArray<A>) => ReadonlyArray<A>\n")),(0,l.kt)("h3",{id:"sortby"},"sortBy"),(0,l.kt)("p",null,"Returns a new array, sorted according to the provided function."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function sortBy<A, B>(xs: ReadonlyArray<A>, sortFn: (_1: A) => B): ReadonlyArray<A>\nfunction sortBy<A, B>(sortFn: (_1: A) => B): (xs: ReadonlyArray<A>) => ReadonlyArray<A>\n")),(0,l.kt)("h3",{id:"splitat"},"splitAt"),(0,l.kt)("p",null,"Returns two arrays (",(0,l.kt)("inlineCode",{parentName:"p"},"Some([xs, ys])"),"), with the original array divided at the given index, or ",(0,l.kt)("inlineCode",{parentName:"p"},"None")," if the index is out of range."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function splitAt<A>(xs: ReadonlyArray<A>, offset: number): Option<readonly [ReadonlyArray<A>, ReadonlyArray<A>]>\nfunction splitAt<A>(offset: number): (\n  xs: ReadonlyArray<A>,\n) => Option<readonly [ReadonlyArray<A>, ReadonlyArray<A>]>\n")),(0,l.kt)("h3",{id:"splitevery"},"splitEvery"),(0,l.kt)("p",null,"Returns an array of arrays, where each of the inner arrays has length equal to the provided ",(0,l.kt)("inlineCode",{parentName:"p"},"size")," parameter."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function splitEvery<A>(xs: ReadonlyArray<A>, size: number): ReadonlyArray<ReadonlyArray<A>>\nfunction splitEvery<A>(size: number): (xs: ReadonlyArray<A>) => ReadonlyArray<ReadonlyArray<A>>\n")),(0,l.kt)("h3",{id:"swapat"},"swapAt"),(0,l.kt)("p",null,"Creates a new array with the elements at the two given indexes swapped (the original array if the index is out of range)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function swapAt<A>(xs: ReadonlyArray<A>, targetIndex: number, swapIndex: number): ReadonlyArray<A>\nfunction swapAt<A>(targetIndex: number, swapIndex: number): (xs: ReadonlyArray<A>) => ReadonlyArray<A>\n")),(0,l.kt)("h3",{id:"tail"},"tail"),(0,l.kt)("p",null,"Returns a new array containing all but the the first element of the provided array, or ",(0,l.kt)("inlineCode",{parentName:"p"},"None")," if the given array is empty (has no tail)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function tail<A>(xs: ReadonlyArray<A>): Option<ReadonlyArray<A>>\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"A.tail([1, 2, 3]) // \u2192 Some([2, 3])\nA.tail([1]) // \u2192 Some([])\nA.tail([]) // \u2192 None\npipe([1, 2, 3, 4], A.tail) // \u2192 Some([2, 3, 4])\n")),(0,l.kt)("h3",{id:"tailorempty"},"tailOrEmpty"),(0,l.kt)("p",null,"Returns a new array containing all but the first element of the provided array, or an empty array if the given array is empty (has no tail)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function tailOrEmpty<A>(xs: ReadonlyArray<A>): ReadonlyArray<A>\n")),(0,l.kt)("h3",{id:"take"},"take"),(0,l.kt)("p",null,"Returns a new array including the first ",(0,l.kt)("inlineCode",{parentName:"p"},"n")," elements of the provided array, or an empty array if ",(0,l.kt)("inlineCode",{parentName:"p"},"n")," is either negative or greater than the length of the provided array."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function take<A>(xs: ReadonlyArray<A>, n: number): ReadonlyArray<A>\nfunction take<A>(n: number): (xs: ReadonlyArray<A>) => ReadonlyArray<A>\n")),(0,l.kt)("h3",{id:"takeexactly"},"takeExactly"),(0,l.kt)("p",null,"Returns a new array (",(0,l.kt)("inlineCode",{parentName:"p"},"Some(xs)"),") with the first ",(0,l.kt)("inlineCode",{parentName:"p"},"n")," elements of the provided array, or ",(0,l.kt)("inlineCode",{parentName:"p"},"None")," if ",(0,l.kt)("inlineCode",{parentName:"p"},"n")," is either negative or greater than the length of the provided array."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function takeExactly<A>(xs: ReadonlyArray<A>, n: number): Option<ReadonlyArray<A>>\nfunction takeExactly<A>(n: number): (xs: ReadonlyArray<A>) => Option<ReadonlyArray<A>>\n")),(0,l.kt)("h3",{id:"takewhile"},"takeWhile"),(0,l.kt)("p",null,"Returns a new array, filled with elements from the provided array until an element doesn't pass the provided predicate."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function takeWhile<A>(xs: ReadonlyArray<A>, predicateFn: (_1: A) => boolean): ReadonlyArray<A>\nfunction takeWhile<A>(predicateFn: (_1: A) => boolean): (xs: ReadonlyArray<A>) => ReadonlyArray<A>\n")),(0,l.kt)("h3",{id:"tap"},"tap"),(0,l.kt)("p",null,"Applies a side-effect function on each element of the provided array."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function tap<A>(xs: ReadonlyArray<A>, fn: (_1: A) => void): ReadonlyArray<A>\nfunction tap<A>(fn: (_1: A) => void): (xs: ReadonlyArray<A>) => ReadonlyArray<A>\n")),(0,l.kt)("h3",{id:"totuple"},"toTuple"),(0,l.kt)("p",null,"Converts the given array to the TypeScript's tuple."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function toTuple<T extends ReadonlyArray<any>>(xs: readonly [...T]): readonly [...T]\n")),(0,l.kt)("h3",{id:"uncons"},"uncons"),(0,l.kt)("p",null,"Splits the provided array into head and tail parts (as a tuple), but only if the array is not empty."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function uncons<A>(xs: ReadonlyArray<A>): Option<readonly [A, ReadonlyArray<A>]>\n")),(0,l.kt)("h3",{id:"uniq"},"uniq"),(0,l.kt)("p",null,"Returns a new array containing only one copy of each element in the provided array."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function uniq<A>(xs: ReadonlyArray<A>): ReadonlyArray<A>\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"A.uniq([1, 2, 2, 3, 4, 4, 5, 6]) // \u2192 [1, 2, 3, 4, 5, 6,]\nA.uniq([[1, 2], [2, 1], [1, 2], [3, 4]]) // \u2192 [[1, 2], [2, 1], [3, 4]]\n\nA.uniq([\n  { name: 'John', age: 20 },\n  { name: 'Emily', age: 30 },\n  { name: 'John', age: 20 },\n]) // \u2192 [{ name: 'John', age: 20 }, { name: 'Emily', age: 30 }]\n\npipe([1, 2, 2, 3, 4, 4, 5, 6], A.uniq) // \u2192 [1, 2, 3, 4, 5, 6,]\n")),(0,l.kt)("h3",{id:"uniqby"},"uniqBy"),(0,l.kt)("p",null,"Returns a new array containing only one copy of each element in the provided array, based upon the value returned by applying the function to each element."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function uniqBy<A, B>(xs: ReadonlyArray<A>, uniqFn: (_1: A) => B): ReadonlyArray<A>\nfunction uniqBy<A, B>(uniqFn: (_1: A) => B): (xs: ReadonlyArray<A>) => ReadonlyArray<A>\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"A.uniqBy([1, 2, 2, 3, 4, 4, 5, 6], F.identity) // \u2192 [1, 2, 3, 4, 5, 6,]\nA.uniqBy(\n  [\n    { name: 'Joe', age: 20 },\n    { name: 'John', age: 20 },\n  ],\n  user => user.age,\n) // \u2192 [{ name: 'Joe', age: 20 }]\n\npipe([1, 2, 2, 3, 4, 4, 5, 6], A.uniqBy(F.identity)) // \u2192 [1, 2, 3, 4, 5, 6,]\n")),(0,l.kt)("h3",{id:"unzip"},"unzip"),(0,l.kt)("p",null,"Takes an array of pairs and creates a pair of arrays. The first array contains all the first elements of the pairs and the other one contains all the second elements."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function unzip<A, B>(xs: ReadonlyArray<readonly [A, B]>): readonly [ReadonlyArray<A>, ReadonlyArray<B>]\n")),(0,l.kt)("h3",{id:"updateat"},"updateAt"),(0,l.kt)("p",null,"Creates a new array that replaces the value at the given index with the value returned by the provided function (the original array if the index is out of range)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function updateAt<A>(xs: ReadonlyArray<A>, targetIndex: number, fn: (_1: A) => A): ReadonlyArray<A>\nfunction updateAt<A>(targetIndex: number, fn: (_1: A) => A): (xs: ReadonlyArray<A>) => ReadonlyArray<A>\n")),(0,l.kt)("h3",{id:"zip"},"zip"),(0,l.kt)("p",null,"Creates a new array of pairs from corresponding elements of two provided arrays."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function zip<A, B>(xs1: ReadonlyArray<B>): (xs0: ReadonlyArray<A>) => ReadonlyArray<readonly [A, B]>\nfunction zip<A, B>(xs0: ReadonlyArray<A>, xs1: ReadonlyArray<B>): ReadonlyArray<readonly [A, B]>\n")),(0,l.kt)("h3",{id:"zipwith"},"zipWith"),(0,l.kt)("p",null,"Creates a new array by applying ",(0,l.kt)("inlineCode",{parentName:"p"},"zipFn")," to corresponding elements of two provided arrays."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function zipWith<A, B, C>(xs0: ReadonlyArray<A>, xs1: ReadonlyArray<B>, zipFn: (_1: A, _2: B) => C): ReadonlyArray<C>\nfunction zipWith<A, B, C>(xs1: ReadonlyArray<B>, zipFn: (_1: A, _2: B) => C): (xs0: ReadonlyArray<A>) => ReadonlyArray<C>\n")),(0,l.kt)("h3",{id:"zipwithindex"},"zipWithIndex"),(0,l.kt)("p",null,"Creates a new array of each value paired with its index in a tuple."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function zipWithIndex<A>(xs: ReadonlyArray<A>): ReadonlyArray<readonly [A, number]>\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"A.zipWithIndex(['hello', 'world']) // \u2192 [['hello', 0], ['world', 1]]\n")))}p.isMDXComponent=!0;var s=["components"],u={id:"array",title:"Array"},y=void 0,A={unversionedId:"array",id:"array",title:"Array",description:"Utility functions for Array.",source:"@site/api/array.mdx",sourceDirName:".",slug:"/array",permalink:"/ts-belt/api/array",tags:[],version:"current",frontMatter:{id:"array",title:"Array"},sidebar:"sidebar",previous:{title:"pipe & flow",permalink:"/ts-belt/api/pipe-flow"},next:{title:"Boolean",permalink:"/ts-belt/api/boolean"}},c=o,m={toc:c};function h(e){var n=e.components,a=(0,r.Z)(e,s);return(0,l.kt)("wrapper",(0,t.Z)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Utility functions for ",(0,l.kt)("inlineCode",{parentName:"p"},"Array"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function() {\n  const xs = A.makeWithIndex(5, index => index) // \u2192 [0, 1, 2, 3, 4]\n  const value = pipe(\n    xs,\n    A.tail, // \u2192 [1, 2, 3, 4]\n    A.take(2), // \u2192 [1, 2]\n    A.map(value => value * 2), // \u2192 [2, 4]\n  )\n\n  return JSON.stringify(value)\n}\n")),(0,l.kt)(p,{mdxType:"Array"}))}h.isMDXComponent=!0}}]);